plugins {
	id 'java'
	id 'jacoco'
	id "com.github.spotbugs" version "5.0.12"
	id 'pmd'

	id 'com.adarshr.test-logger' version '3.2.0'
	id 'com.diffplug.spotless' version '6.21.0'
	id 'com.github.ben-manes.versions' version '0.47.0'
	id 'de.undercouch.download' version '5.5.0'
	id 'info.solidsoft.pitest' version '1.9.11'
}

repositories {
	mavenCentral()
}

ext.junitVersion = "5.10.0"

dependencies {
	testImplementation "org.junit.jupiter:junit-jupiter-api:$junitVersion"
	testImplementation "org.junit.jupiter:junit-jupiter-params:$junitVersion"
	testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$junitVersion"

	testRuntimeOnly("org.junit.platform:junit-platform-launcher") {
		because("required for pitest")
	}
}

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

tasks.withType(JavaCompile).configureEach {
	options.compilerArgs << '-Xdiags:verbose'
	options.compilerArgs << '-Xlint:all'
	options.compilerArgs << '-Werror'
	options.deprecation = true
	options.encoding = 'UTF-8'
}

test {
	useJUnitPlatform()
	// failFast true
	finalizedBy jacocoTestReport
}
jacocoTestReport {
	dependsOn test // tests are required to run before generating the report
	reports {
		xml.required = true
		csv.required = true
		html.required = true
		html.outputLocation = layout.buildDirectory.dir('jacoco')
	}
}
jacoco {
	toolVersion = "0.8.9"
	reportsDirectory = layout.buildDirectory.dir('jacoco')
}

testlogger {
	theme 'standard'

	showExceptions true
	showStackTraces true
	showFullStackTraces false
	showCauses true

	slowThreshold 2000

	showSummary true
	showSimpleNames false
	showPassed true
	showSkipped true
	showFailed true
	showOnlySlow false

	showStandardStreams true
	showPassedStandardStreams true
	showSkippedStandardStreams true
	showFailedStandardStreams true

	logLevel 'lifecycle'
}

// Format code always before compiling
tasks.compileJava.dependsOn(spotlessApply)

spotless {
	// optional: limit format enforcement to just the files changed by this feature branch
	//ratchetFrom 'origin/main'

	format 'misc', {
		// define the files to apply `misc` to
		target '*.gradle', '*.md', '.gitignore'

		// define the steps to apply to those files
		trimTrailingWhitespace()
		indentWithTabs()
		endWithNewline()
		setEncoding('utf-8')
	}

	java {
		importOrder()
		removeUnusedImports()
		formatAnnotations()
		palantirJavaFormat('2.26.0')
	}
}

pitest {
	targetClasses.set([ 'org.minisim.simulation.*', 'org.minisim.utils.*'])
	targetTests.set(['com.ledmington.gal.*'])
	pitestVersion = '1.14.4'
	junit5PluginVersion = '1.2.0'
	threads = 4
	outputFormats.set(['HTML'])
	verbose = true
	timestampedReports = false
}

pmd {
	consoleOutput = true
	toolVersion = "6.21.0"
	rulesMinimumPriority = 5
	ruleSets = ["category/java/errorprone.xml", "category/java/bestpractices.xml"]
}
