plugins {
	id 'application'
	id 'org.openjfx.javafxplugin' version '0.0.13'
	id "com.github.spotbugs" version "5.0.12"
	id 'pmd'

	id 'com.diffplug.spotless' version '6.21.0'
	id 'com.github.ben-manes.versions' version '0.47.0'
	id 'de.undercouch.download' version '5.5.0'
}

repositories {
	mavenCentral()
}

static def path(String... args) {
	return String.join(File.separator, args)
}

def mainClassFullName = 'org.minisim.App'

dependencies {
	implementation project(':model')
	implementation 'org.jcodec:jcodec-javase:0.2.5'
}

application {
	mainClass = mainClassFullName
}

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

tasks.withType(JavaCompile).configureEach {
	options.compilerArgs << '-Xdiags:verbose'
	options.compilerArgs << '-Xlint:all'
	options.compilerArgs << '-Werror'
	options.deprecation = true
	options.encoding = 'UTF-8'
}

// Format code always before compiling
tasks.compileJava.dependsOn(spotlessApply)

javafx {
	version = '18.0.2'
	modules = [ 'javafx.controls', 'javafx.graphics' ]
}

spotless {
	format 'misc', {
		target '*.md', '.gitignore', '.gitattributes'
		trimTrailingWhitespace()
		indentWithTabs()
		endWithNewline()
		setEncoding('utf-8')
	}

	java {
		target fileTree('.') {
			include path('**', '*.java')
			exclude path('**', 'build', '**'), path('**', 'build-*', '**'), path('**', 'bin', '**')
		}
		removeUnusedImports()
		formatAnnotations()
		trimTrailingWhitespace()
		endWithNewline()
		setEncoding('utf-8')
		palantirJavaFormat('2.26.0')

		// check https://javadoc.io/doc/com.diffplug.spotless/spotless-plugin-gradle/latest/com/diffplug/gradle/spotless/JavaExtension.html
		importOrder('java', 'javax', 'javafx', 'com', 'com.ledmington', 'org', group as String)

		/*licenseHeader String.join("\n", "/*",
				" * Copyright (C) 2022-${new Date().format('yyyy')} ${author} <${authorMail}>",
				" *",
				" * This file is part of ${appName}.",
				" *",
				" * ${appName} can not be copied and/or distributed without",
				" * the explicit permission of ${author}.",
				" *///")
	}
}

pmd {
	consoleOutput = true
	toolVersion = "6.21.0"
	rulesMinimumPriority = 5
	ruleSets = ["category/java/errorprone.xml", "category/java/bestpractices.xml"]
	threads = 4
}
