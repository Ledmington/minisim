plugins {
	id 'application'
	id 'org.openjfx.javafxplugin' version '0.1.0'
	id "com.github.spotbugs" version "6.0.8"
	id 'pmd'

	id 'com.diffplug.spotless' version '6.25.0'
	id 'com.github.ben-manes.versions' version '0.51.0'
	id 'de.undercouch.download' version '5.6.0'
}

repositories {
	mavenCentral()
}

static def path(String... args) {
	return String.join(File.separator, args)
}

String appName = "minisim"
String appDescription = "Minimalistic N-Body simulation"
String author = "Filippo Barbari"
String authorMail = "filippo.barbari@gmail.com"
String mainClassFullName = 'com.ledmington.minisim.App'

dependencies {
	implementation project(':model')
	implementation 'org.jcodec:jcodec-javase:0.2.5'
}

application {
	mainClass = mainClassFullName
}

run {
	jvmArgs = [
	        '--add-modules', 'jdk.incubator.vector'
	]
}

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
}

tasks.withType(JavaCompile).configureEach {
	options.compilerArgs << '-Xdiags:verbose'
	options.compilerArgs << '-Xlint:all'
	options.compilerArgs << '-Werror'
	options.deprecation = true
	options.encoding = 'UTF-8'
}

// Format code always before compiling
tasks.compileJava.dependsOn(spotlessApply)

javafx {
	version = '18.0.2'
	modules = [ 'javafx.controls', 'javafx.graphics' ]
}

spotless {
	format 'misc', {
		target '*.md', '.gitignore', '.gitattributes'
		trimTrailingWhitespace()
		indentWithTabs()
		endWithNewline()
		setEncoding('utf-8')
	}

	java {
		target fileTree('.') {
			include path('**', '*.java')
			exclude path('**', 'build', '**'), path('**', 'build-*', '**'), path('**', 'bin', '**')
		}
		removeUnusedImports()
		formatAnnotations()
		trimTrailingWhitespace()
		endWithNewline()
		setEncoding('utf-8')
		palantirJavaFormat('2.41.0')

		// check https://javadoc.io/doc/com.diffplug.spotless/spotless-plugin-gradle/latest/com/diffplug/gradle/spotless/JavaExtension.html
		importOrder('java', 'javax', 'javafx', 'com', 'com.ledmington', 'org', group as String)

		licenseHeader String.join("\n",
				"/*",
				"* ${appName} - ${appDescription}",
				"* Copyright (C) 2022-${new Date().format('yyyy')} ${author} <${authorMail}>",
				"*",
				"* This program is free software: you can redistribute it and/or modify",
				"* it under the terms of the GNU General Public License as published by",
				"* the Free Software Foundation, either version 3 of the License, or",
				"* (at your option) any later version.",
				"*",
				"* This program is distributed in the hope that it will be useful,",
				"* but WITHOUT ANY WARRANTY; without even the implied warranty of",
				"* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",
				"* GNU General Public License for more details.",
				"*",
				"* You should have received a copy of the GNU General Public License",
				"* along with this program.  If not, see <http://www.gnu.org/licenses/>.",
				"*/",
		)
	}
}

pmd {
	consoleOutput = true
	toolVersion = "6.21.0"
	rulesMinimumPriority = 5
	ruleSets = ["category/java/errorprone.xml", "category/java/bestpractices.xml"]
	threads = 4
}
